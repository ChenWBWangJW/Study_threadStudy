	该小项目为一个线程池的测试项目，意指在编写一个以POSIX为标准的线程池，加强线
程以及同步，互斥，条件变量等概念和多线程并发思想。
	以下为思路总结：

1. 头文件thread.pool.h
	编写，通常头文件作用于编写宏定义，函数和类的声明。每个头文件需在宏定义
#ifndef _...._....H，#define _...._....H和#endif宏定义结构之间来避免可能对某个头文件
的多次包含和定义。

	1.1 包含项目#include <.....>
		该头文件需包含一些标准函数库头文件，来满足对某些标准函数库内的一
些API的调用。若所需标准库内API太多，通过using语句选定瞄准函数库std为命名空间。

	1.2 声明执行任务类class CTask{};
		执行任务的类，设置任务数据并执行，该类的对象由线程池管理，调用其
Run方法执行任务。

		1）该类中需要包含对单个任务属性的描述，如名字，具体数据。

		2）同时需要构造函数和析构函数对属性进行定义和执行完毕后的资源的
释放。

		3）需要开放API供派生子类进行对该类属性进行调用和一些自定义的对
需求进行满足的的普通函数成员。该类的对象由线程池管理.

	1.3 声明线程池管理类class CThreadPool{};
		1）该类需包含一个线程池所应具备的属性，如任务列表，线程退出标志，
已经启动的线程池数量，指向线程池内线程的指针，同步锁和条件变量。
		2）该类需要一个新线程的线程回调函数，完成对待处理任务的调用和处
理，以及对已完成任务的线程进行回收，对空闲线程的调用和任务赋予，创建线程池中
的线程等。
		3）该类需要基本的构造函数和析构函数，还有完成需求所需的一系列普
通函数成员，如把任务添加到任务队列中，停止所有线程，获取任务数量等。


2. 实现文件thread_pool.cpp
	源文件为对应头文件内所声明的函数进行定义的文件

	2.1 void CTask::setData(void* data)
		该函数需通过参数传递的指针data指向具体数据，并传递给类CTask的对
象。

	2.2 静态初始化成员
		对线程池内的任务列表，退出标志，同步锁和条件变量进行初始化。

	2.3 线程管理类构造函数的实现
		传递一个参数，并设置该类内启动的线程池的数量，并进行相应数量的线
程的创建。

	2.4 线程的创建
		利用动态数组new建立相应数量的线程，并对该线程传递具体所需执行的函数

	2.5 线程回调函数
		1）获取自身pid
		2）获取同步锁
		3）如果队列为空，阻塞线程，等待新任务加入队列，并自动释放同步锁
		4）如果线程池退出标志为false，即关停状态，则释放同步锁，打印线程
状态
		5）以上条件都没达成，则获取任务列表中的第一个元素，即待处理任务
中的第一个任务
		6）判断是否为只有一个任务，即两个指针所指向地址是否一致
		7）擦除待处理任务列表中以及提取出的任务
		8）释放同步锁
		9）执行任务

	2.6 添加任务并发出线程同步信号
		1）获取同步锁
		2）添加任务进待处理任务列表
		3）释放同步锁
		4）发送条件信号，激活线程

	2.7 停止所有线程
		1）判断线程池退出标志，若为true，返回
		2）若为false，设定为true，并发送条件变量广播信号，阻塞所有线程
		3）清除所有线程
		4）释放 pthread_id 指向的动态数组所占用的内存，并将指针 
pthread_id 置为 NULL
		5）销毁同步锁和条件变量

	2.7 获取当前队列中的任务数量
		返回容器TaskList的数量

	2.8 ......


3. 实现main.cpp源文件
	声明和定义任务执行类的派生类，并实现具体程序流程

	3.1定义派生类
		定义一个任务执行类的派生类，并定义执行函数Run();，即完成对任务的
具体实现

	3.2main()函数
		实现对线程池的具体业务逻辑

		1）声明对象
		2）对对象具体执行内容的数据的传递
		3）设置线程池数量
		4）添加任务
		5）循环处理任务并获取线程池内任务执行情况
		6）任务执行完毕资源回收，关停程序





